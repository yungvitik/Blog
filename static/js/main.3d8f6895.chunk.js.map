{"version":3,"sources":["api/api.ts","api/posts.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostEditor/PostEditor.tsx","components/PostDetails/PostDetails.tsx","components/NewPostForm/NewPostForm.tsx","App.js","reportWebVitals.js","index.js"],"names":["BASE_URL","request","url","a","options","fetch","then","response","json","loadAllPosts","loadPost","postId","PostsList","props","posts","setDetailsPostId","removePost","className","length","map","post","id","title","type","onClick","to","loadPostComments","NewCommentForm","onAddComments","useState","userComment","setUserComment","onSubmit","event","preventDefault","body","name","placeholder","value","onChange","e","target","PostEditor","editPostId","editPost","postTitle","setPostTitle","postBody","setPostBody","useEffect","loadedPost","PostDetails","detailsPostId","comments","setComments","selectedPost","setSelectedPost","isHiddenComments","setIsHiddenComments","loadedDetails","loadedComments","removeComment","commentId","method","deleteComment","path","element","updatedPost","headers","JSON","stringify","comment","newComment","uploadComment","NewPostForm","addPost","App","setPosts","loadedPosts","exact","newPost","uploadPost","deletePost","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d8f6895.chunk.js","sourcesContent":["const BASE_URL = 'https://bloggy-api.herokuapp.com';\n\nexport const request = async (url: string, options = {}) => {\n  return fetch(`${BASE_URL}${url}`, options).then(response => response.json());\n};\n","import { request } from './api';\n\n\nexport const loadAllPosts = () => {\n  return request('/posts');\n};\n\nexport const loadPost = (postId: number) => {\n  return request(`/posts/${postId}`);\n};\n\nexport const deletePost = (postId: number) => {\n  return request(`/posts/${postId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const uploadPost = (newPost: Partial<Post>) => {\n  return request('/posts', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newPost),\n  });\n};\n\nexport const updatePost = (updatedPost: Partial<Post>) => {\n  return request(`/posts/${updatedPost.id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(updatedPost),\n  });\n};","import React, { useState, useEffect } from 'react';\nimport { Routes, Route, Link } from \"react-router-dom\";\nimport './PostsList.scss';\n\n// type Props = {\n//   selectedUserId: number;\n//   detailsPostId: number;\n//   onSelectPost: (postId :number) => void;\n// };\n\nexport const PostsList = (props: any) => {\n  const { posts, setDetailsPostId, removePost} = props;\n\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.length > 0 ? (\n          <>\n            {posts.map((post: any) => (\n              <li key={post.id} className=\"PostsList__item\">\n                <div>\n                  <strong>{`[Post #${post.id}]: `}</strong>\n                  {post.title}\n                </div>\n                <div>\n                  <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => removePost(post.id)}\n                    >\n                      X\n                    </button>\n\n                  <Link to=\"/details\">\n                    <button\n                      type=\"button\"\n                      className=\"PostsList__button button\"\n                      onClick={() => setDetailsPostId(post.id)}\n                    >\n                    Open\n                    </button>\n                  </Link>\n                </div>\n\n              </li>\n            ))}\n          </>\n        ) : 'No posts'}\n      </ul>\n    </div>\n  );\n};\n","import { request } from './api';\n\nexport const loadPostComments = (postId: number) => {\n  return request(`/comments?postId=${postId}`);\n};\n\nexport const uploadComment = (newComment: Partial<Comment>) => {\n  return request('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n};\n\nexport const deleteComment = (commentId: number) => {\n  return request(`/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number,\n  onAddComments: (newComment: Partial<Comment>) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { postId, onAddComments } = props;\n  const [userComment, setUserComment] = useState('');\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    onAddComments({\n      body: userComment,\n      postId,\n    });\n\n    setUserComment('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={userComment}\n          onChange={(e) => setUserComment(e.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { loadPost} from '../../api/posts';\nimport './PostEditor.scss';\n\n\nexport const PostEditor = (props: any) => {\n  const { editPostId, editPost} = props;\n  const [postTitle, setPostTitle] = useState('');\n  const [postBody, setPostBody] = useState('');\n\n  useEffect(() => {\n    loadPost(editPostId).then(loadedPost => {\n      setPostTitle(loadedPost.title || '');\n      setPostBody(loadedPost.body || '');\n    });\n  }, [editPostId]);\n\n  return (\n    <form\n      className=\"NewForm\"\n    >\n      <div>\n        <div className=\"form-field\">\n          <textarea\n            name=\"title\"\n            placeholder=\"Type post title\"\n            className=\"NewForm__input\"\n            value={postTitle}\n            onChange={(e) => setPostTitle(e.target.value)}\n          />\n        </div>\n        <div className=\"form-field\">\n          <textarea\n            name=\"body\"\n            placeholder=\"\"\n            className=\"NewForm__input\"\n            value={postBody}\n            onChange={(e) => setPostBody(e.target.value)}\n          />\n        </div>\n      </div>\n\n        <button\n          type=\"button\"\n          className=\"NewForm__submit-button button\"\n          onClick={() => {\n            editPost(postTitle, postBody);\n          }}\n        >\n          Save changes\n        </button>\n\n      <Link to=\"/details\">\n        <button\n          type=\"button\"\n          className=\"NewForm__submit-button button\"\n        >\n          Close editor\n        </button>\n      </Link>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Link, Route, Routes } from \"react-router-dom\";\nimport { loadPost, updatePost } from '../../api/posts';\nimport { loadPostComments, uploadComment, deleteComment } from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { PostEditor } from '../PostEditor';\n\n\n\nexport const PostDetails = (props: any) => {\n  const { detailsPostId } = props;\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isHiddenComments, setIsHiddenComments] = useState(false);\n\n\n  useEffect(() => {\n    loadPost(detailsPostId).then(loadedDetails => setSelectedPost(loadedDetails));\n    loadPostComments(detailsPostId).then(loadedComments => setComments(loadedComments));\n  }, [detailsPostId]);\n\n  const editPost = (title: string, body: string) => {\n    updatePost({\n      id: detailsPostId,\n      title,\n      body,\n    })\n    .then(() => {\n      loadPost(detailsPostId).then(loadedDetails => setSelectedPost(loadedDetails));\n    });\n  }\n\n  const addComment = (newComment: Partial<Comment>) => {\n    uploadComment(newComment)\n      .then(() => {\n        loadPostComments(detailsPostId).then(loadedComments => setComments(loadedComments));\n      });\n  };\n\n  const removeComment = (commentId: number) => {\n    deleteComment(commentId)\n      .then(() => {\n        loadPostComments(detailsPostId).then(loadedComments => setComments(loadedComments));\n      });\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <Link to=\"/\">\n        <button\n          type=\"button\"\n          className=\"button\"\n        >\n        Back to postList\n        </button>\n      </Link>\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <Routes>\n          <Route\n            path=\"/\"\n            element={\n            <div>\n              <strong>{selectedPost?.title}</strong>\n              <p>{selectedPost?.body}</p>\n              <Link to=\"/details/edit\">\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                >\n                  Edit\n                </button>\n              </Link>\n            </div>\n            }\n          />\n\n          <Route\n            path=\"/edit\"\n            element={\n            <div className=\"App__content\">\n              <PostEditor editPostId={detailsPostId} editPost={editPost}/>\n            </div>\n            }\n          />\n\n        </Routes>\n      </section>\n\n      {comments.length > 0 && (\n        <section className=\"PostDetails__comments\">\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setIsHiddenComments(!isHiddenComments)}\n          >\n            {`${!isHiddenComments ? 'Hide' : 'Show'} `\n             + `${comments.length} ${comments.length === 1 ? 'comment' : 'comments'}`}\n          </button>\n\n          <ul className=\"PostDetails__list\">\n            {isHiddenComments || (\n              comments.map(comment => (\n                <li\n                  key={comment.id}\n                  className=\"PostDetails__list-item\"\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => removeComment(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))\n            )}\n          </ul>\n        </section>\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={detailsPostId}\n            onAddComments={addComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './NewForm.scss';\n\ntype Props = {\n  addPost: (newPost: Partial<Post>) => void,\n};\n\nexport const NewPostForm: React.FC<Props> = (props) => {\n  const { addPost } = props;\n  const [postTitle, setPostTitle] = useState('');\n  const [postBody, setPostBody] = useState('');\n\n  const resetFormFields = () => {\n    setPostTitle('');\n    setPostBody('');\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    addPost({\n      title: postTitle,\n      body: postBody,\n    });\n\n    resetFormFields();\n  };\n\n  return (\n    <form\n      className=\"NewPostForm\"\n      onSubmit={handleSubmit}\n    >\n      <div>\n        <div className=\"form-field\">\n          <textarea\n            name=\"title\"\n            placeholder=\"Type post title\"\n            className=\"NewPostForm__input\"\n            value={postTitle}\n            onChange={(e) => setPostTitle(e.target.value)}\n          />\n        </div>\n        <div className=\"form-field\">\n          <textarea\n            name=\"body\"\n            placeholder=\"\"\n            className=\"NewPostForm__input\"\n            value={postBody}\n            onChange={(e) => setPostBody(e.target.value)}\n          />\n        </div>\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewPostForm__submit-button button\"\n      >\n        Add post\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Routes, Route, } from \"react-router-dom\";\nimport { loadAllPosts, deletePost, uploadPost, updatePost} from './api/posts';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { NewPostForm } from './components/NewPostForm';\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App = () => {\n  const [detailsPostId, setDetailsPostId] = useState();\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    loadAllPosts()\n    .then(loadedPosts => setPosts(loadedPosts));\n  }, );\n\n  const removePost = (postId) => {\n    deletePost(postId)\n      .then(() => {\n        loadAllPosts().then(loadedPosts => setPosts(loadedPosts));\n      });\n  };\n\n  const addPost = (newPost) => {\n    uploadPost(newPost)\n      .then(() => {\n        loadAllPosts().then(loadedPosts => setPosts(loadedPosts));\n      });\n  };\n\n  // const editPost = (title, body) => {\n  //   updatePost({\n  //     id: setDetailsPostId,\n  //     title,\n  //     body,\n  //   })\n  //   .then(() => {\n  //     loadAllPosts().then(loadedPosts => setPosts(loadedPosts));\n  //   });\n  // }\n\n  return (\n    <div className=\"App\">\n      <Routes>\n        <Route\n          path=\"/Blog\"\n          exact\n          element={\n        <>\n          <div>\n            <NewPostForm addPost={addPost}/>\n          </div>\n          <main className=\"App__main\">\n            <div className=\"App__sidebar\">\n              <PostsList\n                posts={posts}\n                detailsPostId={detailsPostId}\n                setDetailsPostId={setDetailsPostId}\n                removePost={removePost}\n              />\n            </div>\n          </main>\n        </>\n        }/>\n\n        <Route\n          path=\"/Blog/details/*\"\n          element={\n            <div className=\"App__content\">\n              <PostDetails detailsPostId={detailsPostId}/>\n            </div>\n          }\n        />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}